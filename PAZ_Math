#ifndef PAZ_MATH
#define PAZ_MATH

#include <cmath>
#include <vector>
#include <ostream>
#include <numeric>
#include <algorithm>

namespace paz
{
    template<typename T>
    using require_iterable = std::enable_if_t<std::is_same<decltype(std::begin(
        std::declval<const T&>())), decltype(std::end(std::declval<const
        T&>()))>::value>;

    template<typename T>
    using require_integral = std::enable_if_t<std::is_integral<T>::value>;

    template<typename T>
    using require_not_integral = std::enable_if_t<!std::is_integral<T>::value>;

    constexpr double NatBase   = 2.71828182845904523536028747135; // M_E
    constexpr double SqrtTwo   = 1.41421356237309504880168872421; // M_SQRT2
    constexpr double SqrtHalf  = 0.70710678118654752440084436210; // M_SQRT1_2
    constexpr double SqrtThree = 1.73205080756887729352744634151; // M_SQRT3
    constexpr double Pi        = 3.14159265358979323846264338328; // M_PI
    constexpr double TwoPi     = 6.28318530717958647692528676656; // 2.*M_PI

    constexpr std::size_t None = std::numeric_limits<std::size_t>::max();

    std::size_t random_seed();
    double randn();
    std::size_t randi(std::size_t n);
    double uniform();
    double uniform(double a, double b);
    std::size_t pmf_rand(const std::vector<double>& probs);
    std::vector<std::size_t> rand_seq(std::size_t length);
    std::size_t poissrnd(double lambda);

    // log(w) -> w
    void normalize_log_weights(std::vector<double>& logWeights);
    // w -> w
    void normalize_weights(std::vector<double>& weights);

    template<typename T0, typename T1, typename T2>
    constexpr auto mix(T0 a, T1 b, T2 k)
    {
        return a + k*(b - a);
    }

    template<typename T>
    constexpr T clamp(T x, T a, T b)
    {
        return std::max(a, std::min(b, x));
    }

    template<typename T, require_integral<T>* = nullptr>
    constexpr T fract(T /* x */)
    {
        return 0;
    }
    template<typename T, require_not_integral<T>* = nullptr>
    T fract(T x)
    {
        return x - std::floor(x);
    }

    template<typename T>
    constexpr T sign(T x)
    {
        return (T{0} < x) - (x < T{0});
    }

    template<typename T, require_not_integral<T>* = nullptr>
    T normalize_angle(T x)
    {
        return fract(x/TwoPi)*TwoPi;
    }

    template<typename T = double, require_not_integral<T>* = nullptr>
    constexpr T inf()
    {
        return std::numeric_limits<T>::infinity();
    }

    template<typename T = double, require_not_integral<T>* = nullptr>
    constexpr T eps()
    {
        return std::numeric_limits<T>::epsilon();
    }

    template<typename T = double, require_not_integral<T>* = nullptr>
    inline T eps(T x)
    {
        const T x0 = std::abs(x);
        return std::nextafter(x0, inf<T>()) - x0;
    }

    inline double nan()
    {
        return std::nan("");
    }

    class Vec;
    class MatRef;
    class Mat
    {
        friend class MatRef;

        std::vector<double> _vals;
        std::size_t _rows = 0;
        std::size_t _cols = 0;

    public:
        static Mat Constant(std::size_t rows, std::size_t cols, double c);
        static Mat Constant(std::size_t side, double c);
        static Mat Zero(std::size_t rows, std::size_t cols);
        static Mat Zero(std::size_t side);
        static Mat Ones(std::size_t rows, std::size_t cols);
        static Mat Ones(std::size_t side);
        static Mat Identity(std::size_t side);
        static Mat Diag(const MatRef& vals);
        static Mat BlockDiag(const MatRef& a, const MatRef& b);
        static Mat Cross(const MatRef& vals);
        static Mat Hcat(const MatRef& a, const MatRef& b);
        static Mat Vcat(const MatRef& a, const MatRef& b);
        static Mat Randn(std::size_t rows, std::size_t cols);
        static Mat Randn(std::size_t side);

        Mat() = default;
        Mat(std::size_t rows, std::size_t cols);
        Mat(std::size_t side);
        Mat(const Vec& v);
        Mat(const MatRef& m);
        Mat(const std::initializer_list<std::initializer_list<double>>& list);

        double det() const;
        Mat inv() const;
        Mat solve(const Mat& b) const; // x : (*this)*x = b
        Mat chol() const;
        Mat cholUpdate(const Mat& m, double a) const;
        Vec eig() const;
        Vec eig(Mat& vecs) const;
        void qr(Mat& q, Mat& r) const;
        void qr(Mat& q, Mat& r, std::vector<std::size_t>& p) const;
        Mat trans() const;
        Vec diag() const;
        Mat rep(std::size_t m, std::size_t n) const;
        double& operator()(std::size_t i, std::size_t j);
        double operator()(std::size_t i, std::size_t j) const;
        double& operator()(std::size_t i);
        double operator()(std::size_t i) const;
        std::size_t size() const;
        std::size_t rows() const;
        std::size_t cols() const;
        double* data();
        const double* data() const;
        bool empty() const;
        auto begin()
        {
            return _vals.begin();
        }
        auto begin() const
        {
            return _vals.begin();
        }
        auto end()
        {
            return _vals.end();
        }
        auto end() const
        {
            return _vals.end();
        }
        double normSq() const;
        double norm() const;
        double sum() const;
        Vec rowSum() const;
        Mat colSum() const;
        double min() const;
        double max() const;
        Mat normalized() const;
        Mat prod(const MatRef& rhs) const; // elementwise
        Mat quot(const MatRef& rhs) const; // elementwise
        Mat& operator*=(const MatRef& rhs);
        Mat operator*(const MatRef& rhs) const;
        Mat& operator+=(const MatRef& rhs);
        Mat operator+(const MatRef& rhs) const;
        Mat& operator-=(const MatRef& rhs);
        Mat operator-(const MatRef& rhs) const;
        Mat& operator*=(double rhs);
        Mat operator*(double rhs) const;
        Mat& operator/=(double rhs);
        Mat operator/(double rhs) const;
        Mat operator-() const;
        double dot(const MatRef& rhs) const;
        MatRef block(std::size_t startRow, std::size_t startCol, std::size_t
            numRows, std::size_t numCols) const;
        void setBlock(std::size_t startRow, std::size_t startCol, std::size_t
            numRows, std::size_t numCols, const MatRef& rhs);
        MatRef row(std::size_t m) const;
        void setRow(std::size_t m, const MatRef& rhs);
        MatRef col(std::size_t n) const;
        void setCol(std::size_t n, const MatRef& rhs);
        void resize(std::size_t newRows, std::size_t newCols);
        void resizeRows(std::size_t newRows);
        void resizeCols(std::size_t newCols);
        bool hasNan() const;
        void shuffleCols();
    };

    Mat operator*(double lhs, const MatRef& rhs);

    std::ostream& operator<<(std::ostream& out, const MatRef& x);

    class Vec : public Mat
    {
    public:
        static Vec Constant(std::size_t rows, double c);
        static Vec Zero(std::size_t rows);
        static Vec Ones(std::size_t rows);
        static Vec IdQuat();
        static Vec Randn(std::size_t rows);
        static Vec Cat(const MatRef& a, const MatRef& b);

        Vec() = default;
        Vec(std::size_t rows);
        Vec(const Mat& m);
        Vec(const MatRef& m);
        Vec(const std::initializer_list<std::initializer_list<double>>& list);

        MatRef segment(std::size_t start, std::size_t n) const;
        void setSegment(std::size_t start, std::size_t n, const MatRef& rhs);
        MatRef head(std::size_t n) const;
        void setHead(std::size_t n, const Vec& rhs);
        MatRef tail(std::size_t n) const;
        void setTail(std::size_t n, const Vec& rhs);
        void resize(std::size_t newRows);
        Vec cross(const Vec& rhs) const;
    };

    class MatRef
    {
        friend class Mat;

    public:
        struct iterator
        {
            using value_type = double;
            using difference_type = std::ptrdiff_t;
            using reference = const double&;
            using pointer = const double*;
            using iterator_category = std::random_access_iterator_tag;

            pointer ptr;
            difference_type row;
            difference_type origRows;
            difference_type blockRows;

            iterator& operator--();
            iterator operator--(int);
            iterator& operator++();
            iterator operator++(int);
            iterator& operator-=(difference_type n);
            iterator& operator+=(difference_type n);
            iterator operator-(difference_type n) const;
            iterator operator+(difference_type n) const;
            difference_type operator-(const iterator& it) const;
            reference operator*() const;
            reference operator[](difference_type n) const;
            bool operator==(const iterator& it) const;
            bool operator!=(const iterator& it) const;
            bool operator<=(const iterator& it) const;
            bool operator>=(const iterator& it) const;
            bool operator<(const iterator& it) const;
            bool operator>(const iterator& it) const;
        };

    private:
        iterator _begin;
        std::size_t _origCols;
        std::size_t _blockCols;

        MatRef(const Mat& m, std::size_t startRow, std::size_t startCol, std::
            size_t numRows, std::size_t numCols);

    public:
        MatRef(const Mat& m);

        // All `const` methods of `paz::Mat` except `paz::Mat::data`.
        double det() const;
        Mat inv() const;
        Mat solve(const Mat& b) const; // x : (*this)*x = b
        Mat chol() const;
        Mat cholUpdate(const Mat& m, double a) const;
        Vec eig() const;
        Vec eig(Mat& vecs) const;
        void qr(Mat& q, Mat& r) const;
        void qr(Mat& q, Mat& r, std::vector<std::size_t>& p) const;
        Mat trans() const;
        Vec diag() const;
        Mat rep(std::size_t m, std::size_t n) const;
        double operator()(std::size_t i, std::size_t j) const;
        double operator()(std::size_t i) const;
        std::size_t size() const;
        std::size_t rows() const;
        std::size_t cols() const;
        bool empty() const;
        const iterator& begin() const;
        iterator end() const;
        double normSq() const;
        double norm() const;
        double sum() const;
        Vec rowSum() const;
        Mat colSum() const;
        double min() const;
        double max() const;
        Mat normalized() const;
        Mat prod(const MatRef& rhs) const; // elementwise
        Mat quot(const MatRef& rhs) const; // elementwise
        Mat operator*(const MatRef& rhs) const;
        Mat operator+(const MatRef& rhs) const;
        Mat operator-(const MatRef& rhs) const;
        Mat operator*(double rhs) const;
        Mat operator/(double rhs) const;
        Mat operator-() const;
        double dot(const MatRef& rhs) const;
        MatRef block(std::size_t startRow, std::size_t startCol, std::size_t
            numRows, std::size_t numCols) const;
        MatRef row(std::size_t m) const;
        MatRef col(std::size_t n) const;
        bool hasNan() const;
    };

    MatRef::iterator operator+(MatRef::iterator::difference_type n, const
        MatRef::iterator& it);

    bool operator==(const MatRef& a, const MatRef& b);
    bool operator!=(const MatRef& a, const MatRef& b);

    Mat to_mat(const Vec& q);
    Vec to_quat(const Mat& m);
    Vec qinv(const Vec& q);
    Mat xi(const Vec& q);
    Vec qmult(const Vec& p, const Vec& q);
    Vec axis_angle(const Vec& axis, double angle);
    Vec nlerp(const Vec& p, const Vec& q, double k);

    template<typename T, require_iterable<T>* = nullptr>
    bool any_true(const T& v)
    {
        return std::any_of(std::begin(v), std::end(v), [](bool x){ return x; });
    }

    template<typename T, require_iterable<T>* = nullptr>
    bool all_true(const T& v)
    {
        return std::all_of(std::begin(v), std::end(v), [](bool x){ return x; });
    }

    template<typename T, require_iterable<T>* = nullptr>
    bool none_true(const T& v)
    {
        return std::none_of(std::begin(v), std::end(v), [](bool x){ return x;
            });
    }

    template<typename T, require_iterable<T>* = nullptr>
    std::size_t num_true(const T& v)
    {
        return std::accumulate(std::begin(v), std::end(v), std::size_t{0});
    }

    double gaussian_pdf(const Vec& mean, const Mat& cholCov, const Vec& x);
    double cs_divergence(const Vec& meanA, const Mat& cholCovA, const Vec&
        meanB, const Mat& cholCovB);
    Vec gmm_rand(const std::vector<double>& weights, const std::vector<Vec>&
        means, const std::vector<Mat>& cholCovs);

    double jv(const Mat& costMat, std::vector<std::size_t>& rowSols);
}

#endif
