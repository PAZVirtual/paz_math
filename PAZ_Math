#ifndef PAZ_MATH
#define PAZ_MATH

#include <cmath>
#include <vector>
#include <ostream>

namespace paz
{
    constexpr double NatBase   = 2.71828182845904523536028747135; // M_E
    constexpr double SqrtTwo   = 1.41421356237309504880168872421; // M_SQRT2
    constexpr double SqrtHalf  = 0.70710678118654752440084436210; // M_SQRT1_2
    constexpr double SqrtThree = 1.73205080756887729352744634151; // M_SQRT3
    constexpr double Pi        = 3.14159265358979323846264338328; // M_PI
    constexpr double TwoPi     = 6.28318530717958647692528676656; // 2.*M_PI

    double randn();
    int randi(int a, int b);
    double uniform();
    double uniform(double a, double b);

    inline double mix(double a, double b, double k)
    {
        return a + k*(b - a);
    }

    inline double fract(const double n)
    {
        return n - std::floor(n);
    }

    inline double normalize_angle(const double n)
    {
        return fract(n/TwoPi)*TwoPi;
    }

    class Vec;
    class Mat
    {
        std::vector<double> _vals;
        std::size_t _rows = 0;

    public:
        static Mat Constant(std::size_t rows, std::size_t cols, double c);
        static Mat Constant(std::size_t side, double c);
        static Mat Zero(std::size_t rows, std::size_t cols);
        static Mat Zero(std::size_t side);
        static Mat Ones(std::size_t rows, std::size_t cols);
        static Mat Ones(std::size_t side);
        static Mat Identity(std::size_t side);
        static Mat Diag(const Vec& vals);

        Mat() = default;
        Mat(std::size_t rows, std::size_t cols);
        Mat(std::size_t side);
        Mat(const Vec& v);
        Mat(const std::initializer_list<std::initializer_list<double>>& list);

        double det() const;
        Mat inv() const;
        Mat solve(const Mat& b) const; // x : (*this)*x = b
        Mat chol() const;
        Mat cholUpdate(const Mat& m, double a) const;
        Vec eig() const;
        Vec eig(Mat& vecs) const;
        void qr(Mat& q, Mat& r) const;
        void qr(Mat& q, Mat& r, std::vector<std::size_t>& p) const;
        Mat trans() const;
        Vec diag() const;
        Mat rep(std::size_t m, std::size_t n) const;
        double& operator()(std::size_t i, std::size_t j);
        double operator()(std::size_t i, std::size_t j) const;
        double& operator()(std::size_t i);
        double operator()(std::size_t i) const;
        std::size_t size() const;
        std::size_t rows() const;
        std::size_t cols() const;
        double* data();
        const double* data() const;
        bool empty() const;
        auto begin()
        {
            return _vals.begin();
        }
        auto begin() const
        {
            return _vals.begin();
        }
        auto end()
        {
            return _vals.end();
        }
        auto end() const
        {
            return _vals.end();
        }
        double normSq() const;
        double norm() const;
        Mat normalized() const;
        Mat prod(const Mat& rhs) const; // elementwise
        Mat quot(const Mat& rhs) const; // elementwise
        Mat& operator*=(const Mat& rhs);
        Mat operator*(const Mat& rhs) const;
        Mat& operator+=(const Mat& rhs);
        Mat operator+(const Mat& rhs) const;
        Mat& operator-=(const Mat& rhs);
        Mat operator-(const Mat& rhs) const;
        Mat& operator*=(double rhs);
        Mat operator*(double rhs) const;
        Mat& operator/=(double rhs);
        Mat operator/(double rhs) const;
        Mat operator-() const;
        double dot(const Mat& rhs) const;
        Mat block(std::size_t startRow, std::size_t startCol, std::size_t
            numRows, std::size_t numCols) const;
        void setBlock(std::size_t startRow, std::size_t startCol, std::size_t
            numRows, std::size_t numCols, const Mat& rhs);
        Mat row(std::size_t m) const;
        void setRow(std::size_t m, const Mat& rhs);
        Mat col(std::size_t n) const;
        void setCol(std::size_t n, const Mat& rhs);
    };

    Mat& operator*=(double lhs, Mat& rhs);
    Mat operator*(double lhs, const Mat& rhs);

    std::ostream& operator<<(std::ostream& out, const paz::Mat& x);

    class Vec : public Mat
    {
    public:
        static Vec Constant(std::size_t rows, double c);
        static Vec Zero(std::size_t rows);
        static Vec Ones(std::size_t rows);
        static Vec IdQuat();

        Vec() = default;
        Vec(std::size_t rows);
        Vec(const Mat& m);
        Vec(const std::initializer_list<std::initializer_list<double>>& list);

        Vec segment(std::size_t start, std::size_t n) const;
        void setSegment(std::size_t start, std::size_t n, const Vec& rhs);
        Vec head(std::size_t n) const;
        void setHead(std::size_t n, const Vec& rhs);
        Vec tail(std::size_t n) const;
        void setTail(std::size_t n, const Vec& rhs);
        Vec cross(const Vec& rhs) const;
    };

    Mat mix(const Mat& a, const Mat& b, double k);
    Mat to_mat(const Vec& q);
    Vec to_quat(const Mat& m);
    Vec qinv(const Vec& q);
    Mat xi(const Vec& q);
    Vec qmult(const Vec& p, const Vec& q);
    Vec axis_angle(const Vec& axis, double angle);
    Vec nlerp(const Vec& p, const Vec& q, double k);
}

#endif
